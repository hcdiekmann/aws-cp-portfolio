AWSTemplateFormatVersion: '2010-09-09'
Description: A very basic Cloud Services implementation for my Network Infrastructure course Because of tight budget, "Port Hills Thrills" only need one compute instance, and one decoupled database. Resilience of compute is not expected, therefore there is no scaling, load balancing or multiple EC2s across AZs.

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: 'CapstoneKey' # Replace with your key pair name
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DBName:
    Default: djangodb
    Description: The RDS name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Description: The RDS admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: The RDS database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

Resources:
  #######################
  ## Network Resources ##
  #######################

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      Tags:
        - Key: 'Name'
          Value: 'MyVPC'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: 'us-east-1a'
      Tags:
        - Key: 'Name'
          Value: 'PublicSubnet'

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: 'us-east-1a'
      Tags:
        - Key: 'Name'
          Value: 'PrivateSubnet1'

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: 'us-east-1b'
      Tags:
        - Key: 'Name'
          Value: 'PrivateSubnet2'

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: 'Name'
          Value: 'PrivateRouteTable'
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # NAT Getway for Private Subnet to access internet for updates, patches, etc.
  EIPForNATGateway:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPCGatewayAttachment
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt EIPForNATGateway.AllocationId
      SubnetId: !Ref PublicSubnet

  # DB Subnet Group for RDS instance to use private subnets in two AZs
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'Subnet group for RDS instance'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  #########################
  ## Security Resources  ##
  #########################
  BastionHostSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable SSH access from specified IP address range'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0 # Replace with specific IP address for SSH access
      Tags:
        - Key: 'Name'
          Value: 'BastionHostSecurityGroup'

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80 + SSH access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref BastionHostSecurityGroup
      Tags:
        - Key: 'Name'
          Value: 'WebServerSecurityGroup'

  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access from web server
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref WebServerSecurityGroup

  #######################
  ## Compute Resources ##
  #######################
  BastionHost:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0e1c5d8c23330dee3 # specific AMI ID for us-east-1
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref BastionHostSecurityGroup
      KeyName: !Ref KeyName
      Tags:
        - Key: 'Name'
          Value: 'BastionHost'

  DjangoWebServer:
    Type: 'AWS::EC2::Instance'
    DependsOn: DBInstance
    Properties:
      IamInstanceProfile: 'LabInstanceProfile'
      ImageId: ami-0e1c5d8c23330dee3 # AMI muust be in the same region as the stack
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd python3 python3-pip python3-venv git openssl mysql-devel gcc

          # Clone git repo of django app
          sudo git clone https://github.com/hcdiekmann/django-booking-system.git /var/www

          # Set up Python virtual environment and install dependencies
          cd /var/www/django-booking-system
          sudo python3 -m venv myappenv
          source myappenv/bin/activate
          sudo chown -R ec2-user:ec2-user /var/www/django-booking-system

          # Generate a random SECRET_KEY and write it to a .env file
          echo "SECRET_KEY=$(openssl rand -hex 32)" > /var/www/django-booking-system/.env
          pip install -r requirements.txt

          # Adjust the Django settings.py to connect to the RDS database
          DB_ENDPOINT=$(aws rds describe-db-instances --region ${AWS::Region} --db-instance-identifier ${DBName} --query "DBInstances[0].Endpoint.Address" --output text)
          sed -i "s/ALLOWED_HOSTS = \[\]/ALLOWED_HOSTS = \['*'\]/g" booking_system/settings.py
          sed -i "s/ENGINE': 'django.db.backends.sqlite3'/ENGINE': 'django.db.backends.mysql'/g" booking_system/settings.py
          sed -i "s/NAME': ''/NAME': '${DBName}'/g" booking_system/settings.py
          sed -i "s/USER': ''/USER': '${DBUser}'/g" booking_system/settings.py
          sed -i "s/PASSWORD': ''/PASSWORD': '${DBPassword}'/g" booking_system/settings.py
          sed -i "s/HOST': ''/HOST': '${!DB_ENDPOINT}'/g" booking_system/settings.py
          sed -i "s/PORT': ''/PORT': '3306'/g" booking_system/settings.py

          python manage.py migrate
          python manage.py collectstatic
          
          # Start and enable Apache
          systemctl start httpd
          systemctl enable httpd

          sudo chown -R apache:apache /var/www/django-booking-system
          sudo find /var/www/django-booking-system -type d -exec chmod 755 {} \;
          sudo find /var/www/django-booking-system -type f -exec chmod 644 {} \;

          # Configure Apache to serve the Django application
          echo "<VirtualHost *:80>
            DocumentRoot /var/www/django-booking-system
            Alias /static /var/www/django-booking-system/staticfiles
            <Directory /var/www/django-booking-system/staticfiles>
              Require all granted
            </Directory>
            WSGIDaemonProcess django-app python-path=/var/www/django-booking-system python-home=/var/www/django-booking-system/myappenv
            WSGIProcessGroup django-app
            WSGIScriptAlias / /var/www/django-booking-system/booking_system/wsgi.py
            <Directory /var/www/django-booking-system/booking_system>
              <Files wsgi.py>
                Require all granted
              </Files>
            </Directory>
          </VirtualHost>" > /etc/httpd/conf.d/django-app.conf 

          # Restart Apache
          systemctl restart httpd

      Tags:
        - Key: 'Name'
          Value: 'DjangoWebServer'

  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: !Ref DBName
      DBInstanceIdentifier: !Ref DBName
      Engine: mysql # lowercase sensitive for learner lab
      MultiAZ: false
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: db.t4g.micro
      AllocatedStorage: '5'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !GetAtt
          - DBSecurityGroup
          - GroupId

Outputs:
  WebsiteURL:
    Description: URL for newly created Django website
    Value: !Sub 'http://${DjangoWebServer.PublicIp}'
  DBAddress:
    Description: Newly created RDS database address
    Value: !GetAtt
      - DBInstance
      - Endpoint.Address
